# [searchbnf.conf](http://docs.splunk.com/Documentation/Splunk/latest/Admin/Searchbnfconf)

[listprivateobjects-command]
syntax = LISTPRIVATEOBJECTS APPNAME=<string> OBJTYPE=<string> OBJOWNER=<string>
shortdesc = Provided with an app name, and object type lists all private objects within the app. Can narrow down to an individual owner  
description = \
    Provided with an app names, and object type this will list the private objects of the said type. Currently views, extractions, transforms and savedsearches are supported \
    An additional parameter of OBJOWNER can be passed in to narrow down to an individual user\
    Note that this command is only accessible to those with write access to the app in question
comment1 = \
    This example lists all private views within the app example app 
example1 = | listprivateobjects appname=exampleapp objtype=views
category = generating
usage = public

[shareprivateobject-command]
syntax = SHAREPRIVATEOBJECT APPNAME=<string> OBJTYPE=<string> OBJOWNER=<string> OBJNAME=<string> CLONE=<optional> REOWN=<optional> OVERWRITE=<optional> NEWNAME=<optional> NEWOWNER=<optional>
shortdesc = Provided with an app names, object type, object owner and object name changes a private object to app level sharing
description = \
    Provided with an app names, object type, object owner and object name changes a private object to app level sharingProvided with an app names, object type, object owner and object name changes a private object to app level sharing. Currently views, extractions, transforms and savedsearches are supported \
    The optional clone option clones rather than moves the object from private to app level sharing, the reown option changes the ownership to the app admin at application level sharing\
    Finally, the new name option provides the ability to clone the object into a new name (for example for staging purposes)\
    The new owner is a username listed in the kvstore collection shareprivateobject_owners which is allowed to own cloned objects\
    Note that this command is only accessible to those with write access to the app in question
comment1 = \
    This example shares an object with name "testdash" with owner "testuser"
example1 = | shareprivateobject appname=exampleapp objtype=views objowner=testuser objname=testdash
comment2 = \
    This example shares an object with name "testdash" with owner "testuser" by cloning it into app context and re-owning it to the app admin running the command
example2 = | shareprivateobject appname=exampleapp objtype=views objowner=testuser objname=testdash clone=true reown=true
comment3 = \
    This example clones an object with name "testdash" with owner "testuser" by cloning it into app context, re-owning it to "staginguser" as the name of __staging_testdash
example3 = | shareprivateobject appname=exampleapp objtype=views objowner=testuser objname=testdash clone=true reown=true newowner=staginguser newname=__staging_testdash 
category = generating
usage = public

[changedispatchttl-command]
syntax = CHANGEDISPATCHTTL APPNAME=<string> OWNER=<optional> SHARING=<optional> NEWTTL=<string> SAVEDSEARCH=<string>
shortdesc = Provided with an app name, owner, sharing level, saved search name and TTL value this changes the dispatch.ttl value of a saved search
description = \
    Provided with an app name, owner, sharing level, saved search name and TTL value this changes the dispatch.ttl value of a saved search \
    the sharing if not set will try a private level object and then an app level object, or it can be explicitly set\
    using the owner= field only works for those with admin level access \
    Finally, note the dispatch.ttl only applies if no actions are used on the saved search, use changedispatchttlall for all dispatch ttl values
comment1 = \
    This changes the saved search testreport to a dispatch TTL of 5m
example1 = | changedispatchttl appname=exampleapp newttl=5m
comment2 = \
    This changes the saved search testreport in a private context to a dispatch TTL of 5m
example2 = | changedispatchttl appname=exampleapp newttl=5m sharing=private
category = generating
usage = public

[listdispatchttl-command]
syntax = LISTDISPATCHTTL APPNAME=<string> OWNER=<optional> SHARING=<optional> SAVEDSEARCH=<string>
shortdesc = Provided with an app name, owner, sharing level and saved search name this lists the dispatch.ttl value of a saved search
description = \
    Provided with an app name, owner, sharing level and saved search name this lists the dispatch.ttl value of a saved search \
    using the owner= field only works for those with admin level access\
    Finally, note the dispatch.ttl only applies if no actions are used on the saved search, use listdispatchttlall for all dispatch ttl values
comment1 = \
    This lists the dispatch.ttl of saved search testreport 
example1 = | listdispatchttl appname=exampleapp 
comment2 = \
    This lists the dispatch.ttl value of saved search testreport in a private context
example2 = | listdispatchttl appname=exampleapp sharing=private
category = generating
usage = public

[changedispatchttlall-command]
syntax = CHANGEDISPATCHTTLALL APPNAME=<string> OWNER=<optional> SHARING=<optional> NEWTTL=<string> SAVEDSEARCH=<string>
shortdesc = Provided with an app name, owner, sharing level, saved search name and TTL value this changes the dispatch.ttl and any action.*.ttl values of a saved search
description = \
    Provided with an app name, owner, sharing level, saved search name and TTL value this changes the dispatch.ttl any action.*.ttl values of a saved search \
    the sharing if not set will try a private level object and then an app level object, or it can be explicitly set\
    using the owner= field only works for those with admin level access \
    If you only want to change the dispatch.ttl use changedispatchttl
comment1 = \
    This changes the saved search testreport to a dispatch TTL of 5m for all alert actions and dispatch.ttl values
example1 = | changedispatchttlall appname=exampleapp newttl=5m
comment2 = \
    This changes the saved search testreport in a private context to a dispatch TTL of 5m for all alert actions and dispatch.ttl values
example2 = | changedispatchttlall appname=exampleapp newttl=5m sharing=private
category = generating
usage = public

[listdispatchttlall-command]
syntax = LISTDISPATCHTTLALL APPNAME=<string> OWNER=<optional> SHARING=<optional> SAVEDSEARCH=<string>
shortdesc = Provided with an app name, owner, sharing level and saved search name this lists the dispatch.ttl and any action.*.ttl values of a saved search
description = \
    Provided with an app name, owner, sharing level and saved search name this lists the dispatch.ttl and any action.*.ttl values of a saved search \
    using the owner= field only works for those with admin level access\
    If you only want to list the dispatch.ttl use listdispatchttl
comment1 = \
    This lists the dispatch.ttl and all action.*.ttl values of saved search testreport
example1 = | listdispatchttlall appname=exampleapp
comment2 = \
    This lists the dispatch.ttl and all action.*.ttl values of saved search testreport in a private context
example2 = | listdispatchttlall appname=exampleapp sharing=private
category = generating
usage = public

